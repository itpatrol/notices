<?php
/**
 * @file
 * Tests for notices_email module.
 */

/**
 * Testing main functions of the module.
 */
class NoticesEmailTestCase extends DrupalWebTestCase {

  /**
   * A user with permission the access to page module.
   *
   * @var object
   */
  protected $web_user;

  public static function getInfo() {
    return array(
      'name' => 'Module Notices Email',
      'description' => 'Testing main functions of the module.',
      'group' => 'Notices',
    );
  }

  public function setUp() {
    parent::setUp(array('notices', 'notices_node', 'notices_email'));

    $this->web_user = $this->drupalCreateUser(array('read notices', 'delete notices', 'administer notice settings'));
    $this->drupalLogin($this->web_user);
  }

  /**
   * Settings notices.
   */
  public function testNoticesEmailSettings() {
    $this->drupalGet('notices/settings');
    $elements = $this->xpath('//form[@id=:id]//input[@name=:name]', array(
      ':id' => 'notices-settings',
      ':name' => 'providers[notices_node][notices_email][values][mail]',
    ));
    $this->assertEqual(1, count($elements));

    $elements = $this->xpath('//form[@id=:id]//input[@name=:name]', array(
      ':id' => 'notices-settings',
      ':name' => 'providers[notices_node][notices_email][active]',
    ));

    $status = $elements[0]->attributes();

    $this->assertEqual('checked', (string) $status->checked);

    $edit = array();
    $edit['providers[notices_node][notices_email][active]'] = FALSE;
    $this->drupalPost('notices/settings', $edit, t('Save changes'));

    $settings = notices_load_settings($this->web_user->uid);
    $this->assertEqual(0, $settings->settings['notices_node']['notices_email']['active']);
  }

  /**
   * Send notice, create status send.
   */
  public function testNoticesEmailSend() {
    $edit = array(
      'uid' => $this->web_user->uid,
      'provider' => 'notices_node',
      'message[value]' => $this->randomString(),
      'message[format]' => filter_default_format(),
    );

    $this->drupalPost('admin/config/notices/add', $edit, t('Update status of payment gateways'));

    $count = db_select('notices_email_status', 'n')
      ->condition('n.noticeid', 1)
      ->countQuery()
      ->execute()
      ->fetchField();

    $this->assertEqual(1, $count);
  }

  /**
   * Status send notice.
   */
  public function testNoticesEmailStatus() {
    $edit = array(
      'uid' => $this->web_user->uid,
      'provider' => 'notices_node',
      'message[value]' => $this->randomString(),
      'message[format]' => filter_default_format(),
    );

    $this->drupalPost('admin/config/notices/add', $edit, t('Update status of payment gateways'));

    $notice = noticeid_load(1);
    $status = notices_getSendStatus($notice);
    $this->assertEqual('Sending', $status['notices_email']['status']);

    variable_set('notices_email_cron', TRUE);

    $this->cronRun();

    $notice = db_select('notices_email_status', 'n')
      ->fields('n', array('status'))
      ->execute()
      ->fetchObject();

    $this->assertEqual(NOTICES_EMAIL_STATUS_SEND_SENT, $notice->status);
  }

  /**
   * Delete notice and status send.
   */
  public function testNoticesEmailDelete() {
    $edit = array(
      'uid' => $this->web_user->uid,
      'provider' => 'notices_node',
      'message[value]' => $this->randomString(),
      'message[format]' => filter_default_format(),
    );

    $this->drupalPost('admin/config/notices/add', $edit, t('Update status of payment gateways'));
    $this->drupalPost('notices/delete/1', array(), t('Delete'));

    $count = db_select('notices_email_status', 'n')
      ->countQuery()
      ->execute()
      ->fetchField();

    $this->assertEqual(0, $count);

    $notice = noticeid_load(1);
    $this->assertFalse($notice);
  }
}
