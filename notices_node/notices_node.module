<?php

define('NOTICES_NODE_STATUS_NOT_SEND', 0);
define('NOTICES_NODE_STATUS_SENT', 1);

/**
 * Implements hook_provideNotice().
 */
 
 
function notices_node_provideNotice($op){
  switch($op){
      case 'settings':
            return array(
              'name' => 'notices_node',
              'title' => t('Common notifications'),
            );
          break;
  }//switch
}


/**
 * Implementation of hook_nodeapi().
 */
function notices_node_nodeapi(&$node, $op, $teaser, $page) {
  if ($node->type != 'notices_node') {
    return;
  }
  
  switch($op) {
    case 'insert':

      db_query("INSERT INTO {notices_node_newsletters} (nid, vid, status)
                VALUES(%d, %d, %d)", $node->nid, $node->vid, $node->notices_node['status']);
      
      
      if($node->notices_node['status']){
        //process sending
        $queue = notices_node_getUsers();
        
        foreach($queue as $uid => $receiver) {
          
          $account = user_load($uid);
          $notice = new stdClass();        
              
          foreach($receiver as $name => $value){
            $data[$name] = $value;
          }
  
          $notice->uid = $uid;
          $notice->message = token_replace($node->body,'notices_node',$data);
          $notice->callback = 'notices_node';
          notices_save($notice);
        }

      }
      
      break;
    
    case 'update':

      if (array_key_exists('status', $node->notices_node) && $node->notices_node['status']) {
        //process sending
        db_query("UPDATE {notices_node_newsletters} 
                  SET status = %d 
                  WHERE nid = %d AND vid = %d",$node->notices_node['status'], $node->nid, $node->vid);
                  
        //process sending
        $queue = notices_node_getUsers();
        
        foreach($queue as $uid => $receiver) {
          
          $account = user_load($uid);
          $notice = new stdClass();        
              
          foreach($receiver as $name => $value){
            $data[$name] = $value;
          }
  
          $notice->uid = $uid;
          $notice->message = token_replace($node->body,'notices_node',$data);
          $notice->callback = 'notices_node';
          notices_save($notice);
        }
        
      }
      
      break;
    
    case 'delete':
        db_query("DELETE FROM {notices_node_newsletters} WHERE nid = %d", $node->nid);
      break;
    
    case 'load':
      
        $result = db_fetch_object(db_query("SELECT * 
                                            FROM {notices_node_newsletters}
                                            WHERE nid = %d AND vid = %d", $node->nid, $node->vid));
        $node->notices_node = array(
          'status' => $result->status,
        );
        if(arg(2) != 'edit'){
          global $user;
          $data['uid'] =  $user->uid;
          $data['mail'] =  $user->mail;
          $data['username'] =  $user->name;
          $node->title = token_replace($node->title, 'notices_node', $data);
        }
      break;
    
    case 'view':
        global $user;
        $data['uid'] =  $user->uid;
        $data['mail'] =  $user->mail;
        $data['username'] =  $user->name;
        $node->content['body'] = token_replace($node->content['body'], 'notices_node', $data);
      break;
  }
}


/**
 * Implementation of hook_form_alter().
 */
function notices_node_form_alter(&$form, &$form_state, $form_id) {
  switch($form_id) {
    case 'notices_node_node_form':
      //get all servers
      
      $form['help'] = array(
        '#type' => 'fieldset',
        '#title' => t('Tokens'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['help']['tokens'] = array(
        '#type' => 'markup',
        '#value' => theme('token_help', 'notices_node'),
      );
      
      $form['notices_node'] = array(
        '#type' => 'fieldset',
        '#title' => t('Notice node settings'),
        '#collapsible' => TRUE,
        '#tree' => TRUE,
      );
      if ($form['#node']->notices_node['status'] == NOTICES_NODE_STATUS_SENT) {
        $form['notices_node']['message_status'] = array(
          '#type' => 'markup',
          '#value' => 'Notice is already sent', 
        );
      }
      else {
        $form['notices_node']['status'] = array(
          '#type' => 'checkbox',
          '#title' => t('Send notice'),
          '#default_value' => $form['#node']->notices_node['status'],
          '#disabled' => $form['#node']->notices_node['status'],
        );
      }      
      break;
  }
}


/**
 * Implementation of hook_token_values().
 */
function notices_node_token_values($type, $object = NULL, $options = array()) {
  if ($type == 'notices_node') {
    $tokens['uid'] = $object['uid'];
    $tokens['mail'] = $object['mail'];
    $tokens['username'] = $object['username'];
    return $tokens;
  }
}


/**
 * Implementation of hook_token_list().
 */
function notices_node_token_list($type = 'all') {
  if (in_array($type, array('notices_node', 'all'))) {
    $tokens['notices_node']['uid'] = t("User's uid");
    $tokens['notices_node']['mail'] = t("User's e-mail");
    $tokens['notices_node']['username'] = t("User's name");
    return $tokens;
  }
}


/**
 * Get users uid
 */
function notices_node_getUsers() {
  $query = db_query("SELECT uid, mail, name AS username FROM {users}");
  
  while($data = db_fetch_object($query)) {
    $queue[$data->uid] = array(
      'uid' => $data->uid,
      'mail' => $data->mail,
      'username' => $data->username,
    );
  }
  return $queue;
}


