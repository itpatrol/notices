<?php

define('NOTICES_NODE_STATUS_NOT_SEND', 0);
define('NOTICES_NODE_STATUS_SENT', 1);

/**
 * Implements hook_provideNotice().
 */
function notices_node_provideNotice($op) {
  switch ($op) {
    case 'settings':
      return array(
        'name' => 'notices_node',
        'title' => t('Common notifications'),
      );
  }
}

/**
 * Implements hook_node_insert().
 */
function notices_node_node_insert($node) {
  if ($node->type == 'notices_node') {
    $role = user_role_load_by_name($node->notices_node['role_name']);

    db_insert('notices_node_newsletters')
      ->fields(array(
        'nid' => $node->nid,
        'vid' => $node->vid,
        'rid' => $role ? (int) $role->rid : 0,
        'status' => isset($node->notices_node['status']) ? (int) $node->notices_node['status'] : 0,
      ))
      ->execute();

    if (isset($node->notices_node['status']) && (int) $node->notices_node['status'] == 1) {
      // Process sending.
      $queue = notices_node_get_users($role);

      foreach ($queue as $uid => $receiver) {
        $account = user_load($uid);

        foreach ($receiver as $name => $value) {
          $data[$name] = $value;
        }

        $notice = new stdClass();
        $notice->uid = $uid;
        $notice->provider = 'notices_node';
        $notice->subject = token_replace($node->title, array(
          'user' => $account,
          'node' => $node,
          'notices_node' => $data,
        ));

        $notice->message = token_replace($node->body[LANGUAGE_NONE][0]['value'], array(
          'user' => $account,
          'node' => $node,
          'notices_node' => $data,
        ));

        $notice->format = $node->body[LANGUAGE_NONE][0]['format'];
        notices_save($notice);
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function notices_node_node_update($node) {
  if ($node->type == 'notices_node') {
    if (array_key_exists('status', $node->notices_node) && $node->notices_node['status']) {
      $role = user_role_load($node->notices_node['role_id']);

      // Process sending.
      db_update('notices_node_newsletters')
        ->fields(array(
          'rid' => $role ? $role->rid : 0,
          'status' => $node->notices_node['status'],
        ))
        ->condition('nid', $node->nid, '=')
        ->condition('vid', $node->vid, '=')
        ->execute();

      // Process sending.
      $queue = notices_node_get_users($role);

      foreach ($queue as $uid => $receiver) {
        $account = user_load($uid);

        foreach ($receiver as $name => $value) {
          $data[$name] = $value;
        }

        $notice = new stdClass();
        $notice->uid = $uid;
        $notice->provider = 'notices_node';
        $notice->subject = token_replace($node->title, array(
          'user' => $account,
          'node' => $node,
          'notices_node' => $data,
        ));

        $notice->message = token_replace($node->body[LANGUAGE_NONE][0]['value'], array(
          'user' => $account,
          'node' => $node,
          'notices_node' => $data,
        ));

        $notice->format = $node->body[LANGUAGE_NONE][0]['format'];
        notices_save($notice);
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function notices_node_node_delete($node) {
  if ($node->type == 'notices_node') {
    db_delete('notices_node_newsletters')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_node_load().
 */
function notices_node_node_load($nodes, $types) {
  global $user;

  foreach ($nodes as $nid => $node) {
    if ($node->type == 'notices_node') {
      $result = db_query("SELECT * FROM {notices_node_newsletters} WHERE nid = :nid AND vid = :vid", array(
        ':nid' => $node->nid,
        ':vid' => $node->vid,
      ))->fetchObject();

      $status = NOTICES_NODE_STATUS_NOT_SEND;
      if (isset($result->status)) {
        $status = $result->status;
      }

      $role_id = 0;
      if (isset($result->rid)) {
        $role_id = $result->rid;
      }

      $nodes[$nid]->notices_node = array(
        'status' => $status,
        'role_id' => $role_id,
      );

      $nodes[$nid]->safe_title = $node->title;
      if ($user->uid > 0) {
        $data = array(
          'uid' => $user->uid,
          'mail' => $user->mail,
          'username' => $user->name,
        );
      }
      else {
        $data = array(
          'uid' => 0,
          'mail' => t('Email'),
          'username' => t('Anonymous'),
        );
      }
      $nodes[$nid]->title = token_replace($node->title, array(
        'user' => $user,
        'node' => $node,
        'notices_node' => $data,
      ));
    }
  }
}

/**
 * Implements hook_node_view().
 */
function notices_node_node_view($node, $build_mode = 'full') {
  global $user;
  if ($node->type == 'notices_node') {
    // Loop over all render array elements.
    foreach (element_children($node->content) as $key) {
      $element = &$node->content[$key];
      // Make sure this is a field.
      if (!isset($element['#field_type'])) {
        continue;
      }
      // Loop over all field values.
      foreach (element_children($element) as $field_key) {
        $item = &$element[$field_key];
        // Only fields which result in simple markup elements are supported for
        // token replacements for now.
        if (isset($item['#markup'])) {
          if ($user->uid > 0) {
            $data = array(
              'uid' => $user->uid,
              'mail' => $user->mail,
              'username' => $user->name,
            );
          }
          else {
            $data = array(
              'uid' => 0,
              'mail' => t('Email'),
              'username' => t('Anonymous'),
            );
          }
          $item['#markup'] = token_replace($item['#markup'], array(
            'user' => $user,
            'node' => $node,
            'notices_node' => $data,
          ));
        }
      }
    }
  }
}

/**
 * Implemens of hook_form_alter().
 */
function notices_node_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'notices_node_node_form':
      // Get all servers.
      $status = NOTICES_NODE_STATUS_NOT_SEND;
      if (isset($form['#node']->notices_node['status'])) {
        $status = $form['#node']->notices_node['status'];
      }

      $user_all_roles = notices_node_get_users_roles();
      $role = FALSE;
      if (isset($form['#node']->notices_node['role_id'])) {
        $role = user_role_load($form['#node']->notices_node['role_id']);
      }

      // Fix title on form.
      if (isset($form['#node']->safe_title)) {
        $form['title']['#default_value'] = $form['#node']->safe_title;
      }

      $form['help'] = array(
        '#type' => 'fieldset',
        '#title' => t('Replacement patterns'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#description' => t('These tokens can be used in all text fields except subject and will be replaced on-screen and in the email.'),
        '#group' => 'additional_settings',
      );

      $form['help']['tokens'] = array(
        '#theme' => 'token_tree',
        '#token_types' => array('user', 'node', 'notices_node'),
      );

      $form['notices_node'] = array(
        '#type' => 'fieldset',
        '#title' => t('Notice node settings'),
        '#collapsible' => TRUE,
        '#tree' => TRUE,
        '#group' => 'additional_settings',
      );

      if ($status == NOTICES_NODE_STATUS_SENT) {
        $form['notices_node']['message_status'] = array(
          '#markup' => '<p>' . t('Notice is already sent.') . '</p>',
        );

        $role_name = $role ? $role->name : t('All users');

        $form['notices_node']['message_role'] = array(
          '#markup' => '<p>' . t('Message will be sent to all users with a role: @role.', array(
            '@role' => t($role_name),
          )) . '</p>',
        );
      }
      else {
        $user_roles = array(
          0 => t('- Select -'),
        );

        $user_roles = array_merge($user_roles, $user_all_roles);

        $form['notices_node']['role_name'] = array(
          '#type' => 'select',
          '#title' => t('User roles'),
          '#options' => $user_roles,
          '#default_value' => 0,
        );

        $form['notices_node']['status'] = array(
          '#type' => 'checkbox',
          '#title' => t('Send notice'),
          '#default_value' => $status,
          '#disabled' => $status,
        );
      }

      $form['body'][LANGUAGE_NONE][0]['#required'] = TRUE;
      break;
  }
}

/**
 * Get users uid.
 *
 * @param array|bool $role
 *   User role object.
 *
 * @return array
 *   Users with the selected role.
 */
function notices_node_get_users($role = FALSE) {
  $queue = array();

  if ($role) {
    $users = db_select('users_roles', 'r');
    $users->join('users', 'u', 'u.uid = r.uid');

    $users = $users->fields('u', array('uid', 'mail', 'name'))
      ->condition('r.rid', $role->rid)
      ->condition('r.uid', '0', '!=')
      ->execute()
      ->fetchAll();
  }
  else {
    $users = db_select('users', 'u')
      ->fields('u', array('uid', 'mail', 'name'))
      ->condition('uid', '0', '!=')
      ->execute()
      ->fetchAll();
  }

  foreach ($users as $user) {
    $queue[$user->uid] = array(
      'uid' => $user->uid,
      'mail' => $user->mail,
      'username' => $user->name,
    );
  }

  return $queue;
}

/**
 * Get users roles without roles for anonymous and authenticated roles.
 *
 * @return array
 */
function notices_node_get_users_roles() {
  $roles = array();
  $user_roles = db_select('role', 'r')
    ->fields('r', array('rid', 'name'))
    // Remove from result role for anonymous and authenticated users.
    ->condition('rid', 1, '!=')
    ->condition('rid', 2, '!=')
    ->execute()
    ->fetchAll();

  foreach ($user_roles as $role) {
    $roles[$role->name] = $role->name;
  }

  return $roles;
}
